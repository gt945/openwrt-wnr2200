#!/bin/sh
[ -z "$2" ] && echo "Error: should be run by odhcpc6c" && exit 1
. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

setup_interface () {
	local device="$1"
	proto_init_update "*" 1

	# Merge RA-DNS
	for radns in $RA_DNS; do
		local duplicate=0
		for dns in $RDNSS; do
			[ "$radns" = "$dns" ] && duplicate=1
		done
		[ "$duplicate" = 0 ] && RDNSS="$RDNSS $radns"
	done

	for dns in $RDNSS; do
		proto_add_dns_server "$dns"
	done

	for domain in $DOMAINS; do
		proto_add_dns_search "$domain"
	done

	for prefix in $PREFIXES; do
		proto_add_ipv6_prefix "$prefix"
	done

	[ -n "$USERPREFIX" ] && proto_add_ipv6_prefix "$USERPREFIX"

	# Merge addresses
	for entry in $RA_ADDRESSES; do
		local duplicate=0
		local addr="${entry%%/*}"
		for dentry in $ADDRESSES; do
			local daddr="${dentry%%/*}"
			[ "$addr" = "$daddr" ] && duplicate=1
		done
		[ "$duplicate" = "0" ] && ADDRESSES="$ADDRESSES $entry"
	done

	for entry in $ADDRESSES; do
		local addr="${entry%%/*}"
		entry="${entry#*/}"
		local mask="${entry%%,*}"
		entry="${entry#*,}"
		local preferred="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"

		proto_add_ipv6_address "$addr" "$mask" "$preferred" "$valid" 1
	done

	for entry in $RA_ROUTES; do
		local addr="${entry%%/*}"
		entry="${entry#*/}"
		local mask="${entry%%,*}"
		entry="${entry#*,}"
		local gw="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"
		entry="${entry#*,}"
		local metric="${entry%%,*}"

		if [ -z "$SOURCE_ROUTING" -o -z "$gw" ]; then
			proto_add_ipv6_route "$addr" "$mask" "$gw" "$metric" "$valid"
		else
			proto_add_ipv6_route "$addr" "$mask" "$gw" "$metric" "$valid" "::/128"
			for prefix in $PREFIXES $ADDRESSES; do
				local paddr="${prefix%%,*}"
				proto_add_ipv6_route "$addr" "$mask" "$gw" "$metric" "$valid" "$paddr"
			done
		fi
	done

	proto_add_data
	[ -n "$CER" ] && json_add_string cer "$CER"
	[ -n "$PASSTHRU" ] && json_add_string passthru "$PASSTHRU"
	proto_close_data

	proto_send_update "$INTERFACE"

	if [ -n "$AFTR_IP " -a -n "$IFACE_DSLITE" ]; then
		json_init
		json_add_string name "$IFACE_DSLITE"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "dslite"
		json_add_string peeraddr "$AFTR_IP"
		json_add_string tunlink "$INTERFACE"
		[ -n "$ZONE_DSLITE" ] && json_add_string zone "$ZONE_DSLITE"
		[ -n "$IFACE_DSLITE_DELEGATE" ] && json_add_boolean delegate "$IFACE_DSLITE_DELEGATE"
		json_close_object
		ubus call network add_dynamic "$(json_dump)"
	fi

	MAPTYPE=""
	MAPRULE=""

	if [ -n "$MAPE" ]; then
		MAPTYPE="map-e"
		MAPRULE="$MAPE"
	elif [ -n "$MAPT" ]; then
		MAPTYPE="map-t"
		MAPRULE="$MAPT"
	elif [ -n "$LW4O6" ]; then
		MAPTYPE="lw4o6"
		MAPRULE="$LW4O6"
	fi

	if [ -n "$IFACE_MAP" -a -n "$MAPTYPE" -a -n "$MAPRULE" ]; then
		json_init
		json_add_string name "$IFACE_MAP"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto map
		json_add_string type "$MAPTYPE"
		json_add_string rule "$MAPRULE"
		json_add_string tunlink "$INTERFACE"
		[ -n "$ZONE_MAP" ] && json_add_string zone "$ZONE_MAP"
		[ -n "$IFACE_MAP_DELEGATE" ] && json_add_boolean delegate "$IFACE_MAP_DELEGATE"
		json_close_object
		ubus call network add_dynamic "$(json_dump)"
	fi

	# TODO: $SNTP_IP $SIP_IP $SNTP_FQDN $SIP_DOMAIN
}

teardown_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

case "$2" in
	bound)
		teardown_interface "$1"
		setup_interface "$1"
	;;
	informed|updated|rebound|ra-updated)
		setup_interface "$1"
	;;
	started|stopped|unbound)
		teardown_interface "$1"
	;;
esac

# user rules
[ -f /etc/odhcp6c.user ] && . /etc/odhcp6c.user

exit 0
